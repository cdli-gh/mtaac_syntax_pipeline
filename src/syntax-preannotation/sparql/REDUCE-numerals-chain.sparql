# NU NU => NU <-nummod- NU
# NU1 NU2 => NU1 <-nummod- NU2

# Can also apply for tokens annotated differently if first FORM char is a num.

prefix : <http://oracc.museum.upenn.edu/etcsri/>
prefix conll: <http://ufal.mff.cuni.cz/conll2009-st/task-description.html#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix nif: <http://persistence.uni-leipzig.org/nlp2rdf/ontologies/nif-core#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>

DELETE {
	?num1 conll:SHIFT ?num2.
	?num2 conll:SHIFT ?next.
} INSERT {
	?num2 conll:REDUCE ?num1; conll:EDGE 'nummod'.
	?num1 conll:SHIFT ?next.
} WHERE {
	?num1 conll:SHIFT ?num2.
	?num1 conll:POS ?num1_pos.
	?num1 conll:FORM ?num1_form.
	?num2 conll:POS ?num2_pos.
	?num2 conll:FORM ?num2_form.
	FILTER(
		( str(?num1_pos)='NU' || REGEX(substr(str(?num1_form), 1, 1), "[1-9]") ) && 
		( str(?num2_pos)='NU' || REGEX(substr(str(?num2_form), 1, 1), "[1-9]") )
		)
	OPTIONAL {
		?prev conll:SHIFT ?num1.
		?prev conll:POS ?prev_pos.
		?prev conll:FORM ?prev_form.
	}
	FILTER( 
		!BOUND(?prev_pos) || 
		!REGEX(substr(str(?prev_form), 1, 1), "[1-9]")
		)
	OPTIONAL {
		?num2 conll:SHIFT ?next.
	}
}